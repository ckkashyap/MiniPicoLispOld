# Test if these symbols are available - from init.s
(unless abs (prinl "Failed to find abs"))
(unless + (prinl "Failed to find +"))
(unless all (prinl "Failed to find all"))
(unless and (prinl "Failed to find and"))
(unless any (prinl "Failed to find any"))
(unless append (prinl "Failed to find append"))
(unless apply (prinl "Failed to find apply"))
(unless arg (prinl "Failed to find arg"))
(unless args (prinl "Failed to find args"))
(unless argv (prinl "Failed to find argv"))
(unless -> (prinl "Failed to find ->"))
(unless as (prinl "Failed to find as"))
(unless asoq (prinl "Failed to find asoq"))
(unless assoc (prinl "Failed to find assoc"))
(unless at (prinl "Failed to find at"))
(unless atom (prinl "Failed to find atom"))
(unless bind (prinl "Failed to find bind"))
(unless & (prinl "Failed to find &"))
(unless | (prinl "Failed to find |"))
(unless bit? (prinl "Failed to find bit?"))
(unless x| (prinl "Failed to find x|"))
(unless bool (prinl "Failed to find bool"))
(unless box (prinl "Failed to find box"))
(unless box? (prinl "Failed to find box?"))
(unless ! (prinl "Failed to find !"))
(unless by (prinl "Failed to find by"))
(unless bye (prinl "Failed to find bye"))
(unless caaar (prinl "Failed to find caaar"))
(unless caadr (prinl "Failed to find caadr"))
(unless caar (prinl "Failed to find caar"))
(unless cadar (prinl "Failed to find cadar"))
(unless cadddr (prinl "Failed to find cadddr"))
(unless caddr (prinl "Failed to find caddr"))
(unless cadr (prinl "Failed to find cadr"))
(unless car (prinl "Failed to find car"))
(unless case (prinl "Failed to find case"))
(unless casq (prinl "Failed to find casq"))
(unless catch (prinl "Failed to find catch"))
(unless cdaar (prinl "Failed to find cdaar"))
(unless cdadr (prinl "Failed to find cdadr"))
(unless cdar (prinl "Failed to find cdar"))
(unless cddar (prinl "Failed to find cddar"))
(unless cddddr (prinl "Failed to find cddddr"))
(unless cdddr (prinl "Failed to find cdddr"))
(unless cddr (prinl "Failed to find cddr"))
(unless cdr (prinl "Failed to find cdr"))
(unless char (prinl "Failed to find char"))
(unless chain (prinl "Failed to find chain"))
(unless chop (prinl "Failed to find chop"))
(unless circ (prinl "Failed to find circ"))
(unless circ? (prinl "Failed to find circ?"))
(unless clip (prinl "Failed to find clip"))
(unless cmd (prinl "Failed to find cmd"))
(unless cnt (prinl "Failed to find cnt"))
(unless : (prinl "Failed to find :"))
(unless con (prinl "Failed to find con"))
(unless conc (prinl "Failed to find conc"))
(unless cond (prinl "Failed to find cond"))
(unless cons (prinl "Failed to find cons"))
(unless copy (prinl "Failed to find copy"))
(unless cut (prinl "Failed to find cut"))
(unless date (prinl "Failed to find date"))
(unless de (prinl "Failed to find de"))
(unless dec (prinl "Failed to find dec"))
(unless def (prinl "Failed to find def"))
(unless default (prinl "Failed to find default"))
(unless del (prinl "Failed to find del"))
(unless delete (prinl "Failed to find delete"))
(unless delq (prinl "Failed to find delq"))
(unless diff (prinl "Failed to find diff"))
(unless / (prinl "Failed to find /"))
(unless dm (prinl "Failed to find dm"))
(unless do (prinl "Failed to find do"))
(unless e (prinl "Failed to find e"))
(unless env (prinl "Failed to find env"))
(unless eof (prinl "Failed to find eof"))
(unless eol (prinl "Failed to find eol"))
(unless == (prinl "Failed to find =="))
(unless =0 (prinl "Failed to find =0"))
(unless =1 (prinl "Failed to find =1"))
(unless =T (prinl "Failed to find =T"))
(unless = (prinl "Failed to find ="))
(unless eval (prinl "Failed to find eval"))
(unless extra (prinl "Failed to find extra"))
(unless extract (prinl "Failed to find extract"))
(unless fifo (prinl "Failed to find fifo"))
(unless fill (prinl "Failed to find fill"))
(unless filter (prinl "Failed to find filter"))
(unless fin (prinl "Failed to find fin"))
(unless finally (prinl "Failed to find finally"))
(unless find (prinl "Failed to find find"))
(unless fish (prinl "Failed to find fish"))
(unless flg? (prinl "Failed to find flg?"))
(unless flip (prinl "Failed to find flip"))
(unless flush (prinl "Failed to find flush"))
(unless fold (prinl "Failed to find fold"))
(unless for (prinl "Failed to find for"))
(unless format (prinl "Failed to find format"))
(unless from (prinl "Failed to find from"))
(unless full (prinl "Failed to find full"))
(unless fully (prinl "Failed to find fully"))
(unless fun? (prinl "Failed to find fun?"))
(unless gc (prinl "Failed to find gc"))
(unless >= (prinl "Failed to find >="))
(unless ge0 (prinl "Failed to find ge0"))
(unless get (prinl "Failed to find get"))
(unless getl (prinl "Failed to find getl"))
(unless glue (prinl "Failed to find glue"))
(unless > (prinl "Failed to find >"))
(unless gt0 (prinl "Failed to find gt0"))
(unless head (prinl "Failed to find head"))
(unless heap (prinl "Failed to find heap"))
(unless ==== (prinl "Failed to find ===="))
(unless idx (prinl "Failed to find idx"))
(unless if (prinl "Failed to find if"))
(unless if2 (prinl "Failed to find if2"))
(unless ifn (prinl "Failed to find ifn"))
(unless in (prinl "Failed to find in"))
(unless inc (prinl "Failed to find inc"))
(unless index (prinl "Failed to find index"))
(unless intern (prinl "Failed to find intern"))
(unless isa (prinl "Failed to find isa"))
(unless job (prinl "Failed to find job"))
(unless last (prinl "Failed to find last"))
(unless <= (prinl "Failed to find <="))
(unless le0 (prinl "Failed to find le0"))
(unless length (prinl "Failed to find length"))
(unless let (prinl "Failed to find let"))
(unless let? (prinl "Failed to find let?"))
(unless line (prinl "Failed to find line"))
(unless link (prinl "Failed to find link"))
(unless list (prinl "Failed to find list"))
(unless lit (prinl "Failed to find lit"))
(unless lst? (prinl "Failed to find lst?"))
(unless load (prinl "Failed to find load"))
(unless loop (prinl "Failed to find loop"))
(unless low? (prinl "Failed to find low?"))
(unless lowc (prinl "Failed to find lowc"))
(unless < (prinl "Failed to find <"))
(unless lt0 (prinl "Failed to find lt0"))
(unless lup (prinl "Failed to find lup"))
(unless made (prinl "Failed to find made"))
(unless make (prinl "Failed to find make"))
(unless map (prinl "Failed to find map"))
(unless mapc (prinl "Failed to find mapc"))
(unless mapcan (prinl "Failed to find mapcan"))
(unless mapcar (prinl "Failed to find mapcar"))
(unless mapcon (prinl "Failed to find mapcon"))
(unless maplist (prinl "Failed to find maplist"))
(unless maps (prinl "Failed to find maps"))
(unless match (prinl "Failed to find match"))
(unless max (prinl "Failed to find max"))
(unless maxi (prinl "Failed to find maxi"))
(unless member (prinl "Failed to find member"))
(unless memq (prinl "Failed to find memq"))
(unless meta (prinl "Failed to find meta"))
(unless method (prinl "Failed to find method"))
(unless min (prinl "Failed to find min"))
(unless mini (prinl "Failed to find mini"))
(unless mix (prinl "Failed to find mix"))
(unless mmeq (prinl "Failed to find mmeq"))
(unless * (prinl "Failed to find *"))
(unless */ (prinl "Failed to find */"))
(unless name (prinl "Failed to find name"))
(unless nand (prinl "Failed to find nand"))
(unless n== (prinl "Failed to find n=="))
(unless n0 (prinl "Failed to find n0"))
(unless nT (prinl "Failed to find nT"))
(unless <> (prinl "Failed to find <>"))
(unless need (prinl "Failed to find need"))
(unless new (prinl "Failed to find new"))
(unless next (prinl "Failed to find next"))
(unless nil (prinl "Failed to find nil"))
(unless nond (prinl "Failed to find nond"))
(unless nor (prinl "Failed to find nor"))
(unless not (prinl "Failed to find not"))
(unless nth (prinl "Failed to find nth"))
(unless num? (prinl "Failed to find num?"))
(unless off (prinl "Failed to find off"))
(unless offset (prinl "Failed to find offset"))
(unless on (prinl "Failed to find on"))
(unless one (prinl "Failed to find one"))
(unless onOff (prinl "Failed to find onOff"))
(unless opt (prinl "Failed to find opt"))
(unless or (prinl "Failed to find or"))
(unless out (prinl "Failed to find out"))
(unless pack (prinl "Failed to find pack"))
(unless pair (prinl "Failed to find pair"))
(unless pass (prinl "Failed to find pass"))
(unless path (prinl "Failed to find path"))
(unless pat? (prinl "Failed to find pat?"))
(unless peek (prinl "Failed to find peek"))
(unless pick (prinl "Failed to find pick"))
(unless pop (prinl "Failed to find pop"))
(unless ++ (prinl "Failed to find ++"))
(unless pre? (prinl "Failed to find pre?"))
(unless prin (prinl "Failed to find prin"))
(unless prinl (prinl "Failed to find prinl"))
(unless print (prinl "Failed to find print"))
(unless println (prinl "Failed to find println"))
(unless printsp (prinl "Failed to find printsp"))
(unless prior (prinl "Failed to find prior"))
(unless prog (prinl "Failed to find prog"))
(unless prog1 (prinl "Failed to find prog1"))
(unless prog2 (prinl "Failed to find prog2"))
(unless prop (prinl "Failed to find prop"))
(unless :: (prinl "Failed to find ::"))
(unless prove (prinl "Failed to find prove"))
(unless push (prinl "Failed to find push"))
(unless push1 (prinl "Failed to find push1"))
(unless push1q (prinl "Failed to find push1q"))
(unless put (prinl "Failed to find put"))
(unless putl (prinl "Failed to find putl"))
(unless queue (prinl "Failed to find queue"))
(unless quit (prinl "Failed to find quit"))
(unless rand (prinl "Failed to find rand"))
(unless range (prinl "Failed to find range"))
(unless rank (prinl "Failed to find rank"))
(unless rassoc (prinl "Failed to find rassoc"))
(unless read (prinl "Failed to find read"))
(unless % (prinl "Failed to find %"))
(unless replace (prinl "Failed to find replace"))
(unless rest (prinl "Failed to find rest"))
(unless reverse (prinl "Failed to find reverse"))
(unless rot (prinl "Failed to find rot"))
(unless run (prinl "Failed to find run"))
(unless sect (prinl "Failed to find sect"))
(unless seed (prinl "Failed to find seed"))
(unless seek (prinl "Failed to find seek"))
(unless ; (prinl "Failed to find ;"))
(unless send (prinl "Failed to find send"))
(unless set (prinl "Failed to find set"))
(unless =: (prinl "Failed to find =:"))
(unless setq (prinl "Failed to find setq"))
(unless >> (prinl "Failed to find >>"))
(unless size (prinl "Failed to find size"))
(unless skip (prinl "Failed to find skip"))
(unless sort (prinl "Failed to find sort"))
(unless space (prinl "Failed to find space"))
(unless split (prinl "Failed to find split"))
(unless sp? (prinl "Failed to find sp?"))
(unless sqrt (prinl "Failed to find sqrt"))
(unless state (prinl "Failed to find state"))
(unless stem (prinl "Failed to find stem"))
(unless str (prinl "Failed to find str"))
(unless strip (prinl "Failed to find strip"))
(unless str? (prinl "Failed to find str?"))
(unless - (prinl "Failed to find -"))
(unless sum (prinl "Failed to find sum"))
(unless super (prinl "Failed to find super"))
(unless swap (prinl "Failed to find swap"))
(unless sym (prinl "Failed to find sym"))
(unless sym? (prinl "Failed to find sym?"))
(unless t (prinl "Failed to find t"))
(unless tail (prinl "Failed to find tail"))
(unless text (prinl "Failed to find text"))
(unless throw (prinl "Failed to find throw"))
(unless till (prinl "Failed to find till"))
(unless $ (prinl "Failed to find $"))
(unless trim (prinl "Failed to find trim"))
(unless try (prinl "Failed to find try"))
(unless type (prinl "Failed to find type"))
(unless unify (prinl "Failed to find unify"))
(unless unless (prinl "Failed to find unless"))
(unless until (prinl "Failed to find until"))
(unless up (prinl "Failed to find up"))
(unless upp? (prinl "Failed to find upp?"))
(unless uppc (prinl "Failed to find uppc"))
(unless use (prinl "Failed to find use"))
(unless val (prinl "Failed to find val"))
(unless when (prinl "Failed to find when"))
(unless while (prinl "Failed to find while"))
(unless with (prinl "Failed to find with"))
(unless xchg (prinl "Failed to find xchg"))
(unless xor (prinl "Failed to find xor"))
(unless yoke (prinl "Failed to find yoke"))
(unless zap (prinl "Failed to find zap"))
(unless zero (prinl "Failed to find zero"))
